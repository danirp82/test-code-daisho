{"version":3,"sources":["webpack:///./src/app/components/register/components/register.component.html","webpack:///./src/app/components/register/components/register.component.scss","webpack:///./src/app/components/register/components/register.component.ts","webpack:///./src/app/components/register/register.module.ts","webpack:///./src/app/components/register/register.routing.ts","webpack:///./src/app/core/services/user.service.ts"],"names":[],"mappings":"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","file":"components-register-register-module.js","sourcesContent":["module.exports = \"\\n<div class=\\\"page-body-wrapper full-page-wrapper auth-page\\\">\\n  <div class=\\\"content-wrapper d-flex align-items-center auth register-bg-1 theme-one\\\">\\n    <div class=\\\"row w-100\\\">\\n      <div class=\\\"col-lg-4 mx-auto\\\">\\n        <h2 class=\\\"text-center mb-4\\\">Register</h2>\\n        <div class=\\\"auto-form-wrapper\\\">\\n          <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"submit()\\\">\\n            \\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"input-group\\\">\\n\\n                <input type=\\\"text\\\" \\n                        formControlName=\\\"userName\\\"\\n                        placeholder=\\\"UserName\\\"\\n                        class=\\\"form-control\\\">\\n                \\n                \\n                <div class=\\\"input-group-append\\\">\\n                  <span class=\\\"input-group-text\\\">\\n                    <i class=\\\"fa fa-check-circle\\\"></i>\\n                  </span>\\n                </div>\\n              </div>\\n\\n              <p class=\\\"text-danger\\\" *ngIf=\\\"!registerForm.get('userName').valid && registerForm.get('userName').touched\\\"> {{ inputRequired }} </p>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"input-group\\\">\\n\\n                  <input type=\\\"text\\\" f\\n                          formControlName=\\\"email\\\"\\n                          placeholder=\\\"Email\\\"\\n                          class=\\\"form-control\\\">\\n                  \\n                  \\n                  \\n                  <div class=\\\"input-group-append\\\">\\n                    <span class=\\\"input-group-text\\\">\\n                      <i class=\\\"fa fa-check-circle\\\"></i>\\n                    </span>\\n                  </div>\\n                  \\n                </div>\\n\\n                <p class=\\\"text-danger\\\" *ngIf=\\\"!registerForm.get('email').valid && registerForm.get('email').touched\\\"> {{ inputRequired }} </p>\\n              </div>\\n\\n            <div class=\\\"form-group\\\">\\n              <div class=\\\"input-group\\\">\\n\\n                <input type=\\\"password\\\"\\n                        formControlName=\\\"password\\\"\\n                        placeholder=\\\"Password\\\"\\n                        class=\\\"form-control\\\">\\n                \\n\\n                <div class=\\\"input-group-append\\\">\\n                  <span class=\\\"input-group-text\\\">\\n                    <i class=\\\"fa fa-check-circle\\\"></i>\\n                  </span>\\n                </div>\\n              </div>\\n              <p class=\\\"text-danger\\\" *ngIf=\\\"!registerForm.get('password').valid && registerForm.get('password').touched\\\"> {{ inputRequired }} </p>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n              \\n              <button class=\\\"btn btn-primary submit-btn btn-block\\\" type=\\\"submit\\\" [disabled]=\\\"!registerForm.valid\\\">Register</button>\\n                \\n            </div>\\n            <div class=\\\"text-block text-center my-3\\\">\\n              <span class=\\\"text-small font-weight-semibold\\\">already have an account?</span>\\n              <br>\\n              <a routerLink=\\\"/login\\\" class=\\\"text-black text-small\\\">Login</a>\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <!-- content-wrapper ends -->\\n</div>\\n<!-- page-body-wrapper ends -->\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXIvY29tcG9uZW50cy9yZWdpc3Rlci5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { UserService } from './../../../core/services/user.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  public registerForm: FormGroup;\n\n  public inputRequired = 'Required field';\n\n  constructor(  private _formBuilder: FormBuilder,\n                private _userService: UserService,\n                private _router: Router\n  ) { }\n\n  ngOnInit() {\n    this.buildForm();\n  }\n\n  private buildForm(): void {\n    this.registerForm = this._formBuilder.group({\n        userName: ['', [Validators.required, Validators.maxLength(32), this.userNameFormat]],\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', Validators.required]\n    });\n  }\n\n  userNameFormat( control: AbstractControl ) {\n    const EMAIL_REGEXP = /^[\\w&.-]+$/;\n\n    if (!EMAIL_REGEXP.test(control.value)) {\n        return { 'positive': true };\n    }\n    return null;\n  }\n\n  public submit(): void {\n\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    this._userService.register(this.registerForm.value)\n            .pipe(first())\n            .subscribe(\n                data => {\n                    this._router.navigate(['/login']);\n                },\n                error => {\n                    console.log('Error =>', error);\n                });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule} from '@angular/forms';\n\nimport { RegisterComponent } from './../register/components/register.component';\nimport { routes } from './register.routing';\n\n\n@NgModule({\n  declarations: [\n    RegisterComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule.forChild(routes),\n  ]\n})\nexport class RegisterModule { }\n","import { RegisterComponent } from './../register/components/register.component';\nimport { Routes } from '@angular/router';\n\nexport const routes: Routes = [\n  { path: '', component: RegisterComponent }\n];\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { User } from './../../shared/models/user';\n\n@Injectable({ providedIn: 'root' })\nexport class UserService {\n    constructor(private http: HttpClient) { }\n\n    register(user: User) {\n        return this.http.post(`/users/register`, user);\n    }\n\n}\n"],"sourceRoot":""}